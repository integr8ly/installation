---
# SETUP GITEA
- name: Create Gitea namespace
  shell: oc new-project {{ gitea_namespace }}
  register: gitea_create_namespace_cmd
  failed_when: gitea_create_namespace_cmd.stderr != '' and 'AlreadyExists' not in gitea_create_namespace_cmd.stderr

- name: Create Gitea resources
  shell: oc apply -f {{ item }} -n {{ gitea_namespace }}
  with_items: "{{ gitea_resources }}"

- name: Generate Gitea token
  set_fact:
    gitea_token: "{{ 99999999999999 | random | hash('sha256') }}"

- name: Generate Gitea custom resource template
  template:
    src: "gitea-cr.yml.j2"
    dest: /tmp/gitea-cr.yml
  
- name: Create Gitea custom resource
  shell: oc create -f /tmp/gitea-cr.yml -n {{ gitea_namespace }}
  register: create_gitea_custom_resource_cmd
  failed_when: create_gitea_custom_resource_cmd.stderr != '' and 'AlreadyExists' not in create_gitea_custom_resource_cmd.stderr
  changed_when: create_gitea_custom_resource_cmd.rc == 0

- name: Wait for Gitea pods to be ready
  shell: sleep 5; oc get pods --namespace {{ gitea_namespace }}  |  grep  "0/1"
  register: gitea_pods_not_ready
  until: not gitea_pods_not_ready.stdout
  retries: 20
  delay: 5
  failed_when: gitea_pods_not_ready.stdout
  changed_when: False

- name: Get the name of the gitea pod
  shell: oc get pods --selector='deployment=gitea' -o jsonpath='{.items[0].metadata.name}'
  register: gitea_pod_name

- name: Create a random password for the gitea admin user
  set_fact:
    - gitea_admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

- name: Print out the gitea admin password in the installer logs
  debug:
    msg: "Gitea Admin credentials are {{ gitea_admin_username }} / {{ gitea_admin_password }}"

- name: Create the gitea admin user
  shell: "oc exec {{ gitea_pod_name.stdout }} -- /home/gitea/gitea admin create-user --name={{ gitea_admin_username }} --password={{ gitea_admin_password }} --admin --email=pbraun@redhat.com --config /home/gitea/conf/app.ini"

- name: Create an admin token for the admin user
  uri:
    url: "http://{{ gitea_admin_username }}:{{ gitea_admin_password }}@{{ gitea_namespace }}.{{ gitea_route_suffix }}/api/v1/users/{{ gitea_admin_username }}/tokens"
    method: post
    headers:
      Accept: "application/json"
      Content-Type: "application/json"
    body: '{"name": "adminkey"}'
  register: admin_token_result

- name: Extract sha value from admin token result
  set_fact:
    gitea_token: "{{ admin_token_result.stdout | from_json | json_query('sha1') }}"

- name: Print out the gitea admin token
  debug:
    msg: "Gitea admin token is {{ gitea_token }}"

# SET GITEA TOKEN ENV VAR IN THE WEBAPP 
- name: Check if webapp is installed
  shell: oc get dc/tutorial-web-app -n {{ webapp_namespace }}
  register: check_webapp_installed_cmd
  failed_when: False

# Only set the Gitea token env var if the gitea custom resource was created
- name: Set Gitea token env var for the webapp
  shell: oc set env dc/tutorial-web-app GITEA_TOKEN="{{ gitea_token }}" -n {{ webapp_namespace }}
  when: check_webapp_installed_cmd.rc == 0 and create_gitea_custom_resource_cmd.rc == 0
