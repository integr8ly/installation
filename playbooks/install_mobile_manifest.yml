---
- import_playbook: "./prerequisites.yml"
- import_playbook: "./openshift.yml"

- hosts: localhost
  tasks:
    - include_vars: ../roles/mobile_security_service/defaults/main.yml
    - include_vars: ../roles/ups/defaults/main.yml
    - include_vars: ../roles/mdc/defaults/main.yml

    - name: Retrieve current manifest
      shell: "oc get secret/manifest -o jsonpath='{.data.generated_manifest}' -n {{ eval_webapp_namespace }}"
      register: webapp_secret_cmd

    - name: Decode webapp secret
      set_fact:
        webapp_manifest: "{{ webapp_secret_cmd.stdout | b64decode | from_json }}"

    - set_fact:
        mobile_components: []

    #mobile security service(mss)
    - name: Get Mobile Security Service rest route
      shell: oc get route/route -o template --template \{\{.spec.host\}\} -n {{ eval_mobile_security_service_namespace | default('mobile-security-service') }}
      register: mss_route_cmd
      when: mobile_security_service | default(true) | bool

    - set_fact:
        mss_route: "https://{{mss_route_cmd.stdout}}"
      when: mobile_security_service

    - name: Set Mobile Security Service component
      set_fact:
        mss_manifest:
          - name: Mobile Security Service
            version: "{{ mss_version }}"
            host: "{{ mss_route }}"
            mobile: true
            type: "security"
      when: mobile_security_service | default(true) | bool

    - set_fact:
        mobile_components: "{{mobile_components}} + {{ mss_manifest }}"
      when: mobile_security_service | default(true) | bool

    #unified push server(ups)
    - name: Unified Push Server
      block:
        - name: Get Unified Push Server route
          shell: oc get route/unifiedpush-unifiedpush-proxy  -o template --template \{\{.spec.host\}\} -n {{ eval_ups_namespace | default('unifiedpush') }}
          register: ups_route_cmd
        - set_fact:
            ups_route: "https://{{ups_route_cmd.stdout}}"
        - name: Set Unified Push Server component
          set_fact:
            ups_manifest:
              - name: Unified Push Server
                version: "{{ ups_release_tag }}"
                host: "{{ ups_route }}"
                mobile: true
                type: "push"
        - set_fact:
            mobile_components: "{{ mobile_components }} + {{ ups_manifest }}"
      when: ups | default(true) | bool

    # mobile developer console (mdc)
    - name: Mobile Developer Console
      block:
        - name: Get mdc secure route
          shell: "oc get route/mdc-mdc-proxy -o jsonpath='{.spec.host}' -n {{ mdc_namespace }}"
          register: mdc_route_cmd
        - set_fact:
            mdc_route: "https://{{mdc_route_cmd.stdout}}"
        - name: Set Mobile Developer Console component
          set_fact:
            mdc_manifest:
              - name: Mobile Developer Console
                version: "{{ mdc_release_tag }}"
                host: "{{ mdc_route }}"
        - set_fact:
            mobile_components: "{{ mobile_components }} + {{ mdc_manifest }}"
      when: mdc | default(true) | bool

    - name: Add mobile items to manifest definition
      manifest_add:
        manifest: "{{ webapp_manifest }}"
        items: "{{ mobile_components }}"
      register: manifest_add_out

    - name: Write config to file
      copy:
        content: "{{ manifest_add_out.manifest | to_nice_json }}"
        dest: "/tmp/mobile-manifest.json"

    - name: Create manifest file in webapp namespace
      block:
        - name: Check if manifest secret exists
          shell: oc get secret manifest -n {{ eval_webapp_namespace }}
          register: manifest_secret
          failed_when: manifest_secret.stderr != '' and 'NotFound' not in manifest_secret.stderr

        - name: Delete secret if it exists
          shell: oc delete secret manifest -n {{ eval_webapp_namespace }}
          when: manifest_secret.stderr == ""

        - name: Create manifest secret
          shell: oc create secret generic manifest --from-file=generated_manifest=/tmp/mobile-manifest.json --type=application/json -n {{ eval_webapp_namespace }}

    - name: Create manifest file in mdc namespace
      block:
        - name: Check if manifest secret exists
          shell: oc get secret manifest -n {{ mdc_namespace }}
          register: manifest_secret
          failed_when: manifest_secret.stderr != '' and 'NotFound' not in manifest_secret.stderr

        - name: Delete secret if it exists
          shell: oc delete secret manifest -n {{ mdc_namespace }}
          when: manifest_secret.stderr == ""

        - name: Create manifest secret
          shell: oc create secret generic manifest --from-file=generated_manifest=/tmp/mobile-manifest.json --type=application/json -n {{ mdc_namespace }}
      when: mdc | default(true) | bool

- hosts: master
  gather_facts: no
  tasks:
    - include_role:
        name: mdc
        tasks_from: cors.yml
      vars:
        openshift_master_url: "{{ hostvars['EVAL_VARS']['openshift_master_url'] | replace('https://', '') }}"
      when: mdc | default(true) | bool
    
    - include_role:
        name: mdc
        tasks_from: patch-manifest.yml
      vars:
        mdc_manifest_secret_name: manifest
      tags: ['mdc', 'remote']
      when: 
        - run_master_tasks | default(true) | bool 
        - mdc | default(true) | bool
    
    - name: restart openshift master services
      shell: "/usr/local/bin/master-restart {{ item }}"
      become: yes
      with_items:
        - api
        - controllers
      when: mdc | default(true) | bool

    - name: check if openshift master services are running
      shell: oc get nodes
      register: task_result
      until: task_result.rc == 0
      retries: 6
      delay: 5
      failed_when: task_result.rc != 0
      when: mdc | default(true) | bool