---
- hosts: localhost
  gather_facts: true
  tasks:
    - name: Expose vars
      include_vars: "../roles/nexus/defaults/main.yml"
    - name: Install Nexus
      include_role:
        name: nexus
        tasks_from: install
      tags: ['nexus']
      when: nexus

    - name: Expose vars
      include_vars: "../roles/rhsso/defaults/main.yml"
    -
      name: Set eval_app_host var
      set_fact:
        eval_app_host: "{{ hostvars['EVAL_VARS']['eval_app_host'] }}"
    - name: Expose vars
      include_vars: "../roles/launcher/defaults/main.yml"
    -
      name: Install launcher
      include_role:
        name: launcher
      vars:
        launcher_openshift_sso_username: "{{ eval_rhsso_admin_username }}"
        launcher_openshift_sso_password: "{{ eval_rhsso_admin_password }}"
        launcher_openshift_sso_route: "{{ eval_rhsso_host }}"
        launcher_sso_validate_certs: "{{ eval_sso_validate_certs }}"
        openshift_master_url: "{{ hostvars['EVAL_VARS']['openshift_master_url'] }}"
      tags: ['launcher']
      when: launcher
    -
      name: Retrieve launcher sso env vars
      shell: "oc get dc/launcher-sso \
        -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name==\"{{ item }}\")].value}' \
        -n {{ eval_launcher_namespace }}"
      with_items:
        - 'SSO_SERVICE_USERNAME'
        - 'SSO_SERVICE_PASSWORD'
        - 'SSO_ADMIN_USERNAME'
        - 'SSO_ADMIN_PASSWORD'
      register: _eval_launcher_sso_dc_cmd
      tags: ['bootstrap']
      when: launcher
    -
      name: Set launcher sso playbook vars
      set_fact: "eval_launcher_{{ item.item | lower }}={{ item.stdout }}"
      with_items: "{{ _eval_launcher_sso_dc_cmd.results }}"
      tags: ['bootstrap']
      when: launcher
    -
      name: Find encrypted RH-SSO route
      shell: for route in $(oc get routes -n {{ eval_launcher_namespace }} | awk '{print $1}' | grep -v 'NAME'); do term=$(oc get route $route -n {{ eval_launcher_namespace }} -o template --template \{\{.spec.tls.termination\}\}); if [ "$term" == "edge" ] || [ "$term" == "reencrypt" ]; then echo $route; break; fi; done
      register: rhsso_secure_route_name
      failed_when: rhsso_secure_route_name.stdout == ''
      when: launcher
    -
      name: Retrieve launcher sso hostvars
      shell: "oc get route/{{ rhsso_secure_route_name.stdout }} -o jsonpath='{.spec.host}' -n {{ eval_launcher_namespace }}"
      register: eval_launcher_sso_host_cmd
      tags: ['bootstrap']
      when: launcher
    -
      name: Set launcher sso host var
      set_fact:
        eval_launcher_sso_host: "{{ eval_launcher_sso_host_cmd.stdout }}"
      tags: ['bootstrap']
      when: launcher

    - name: Expose vars
      include_vars: "../roles/code-ready/defaults/main.yml"
    -
      name: Install che
      include_role:
        name: code-ready
      vars:
        che_keycloak_user: "{{ eval_launcher_sso_admin_username }}"
        che_keycloak_password: "{{ eval_launcher_sso_admin_password }}"
        che_keycloak_host: "{{ eval_launcher_sso_host }}"
        che_route_suffix: "{{ eval_app_host }}"
        che_protocol: https
        che_ws_protocol: wss
        cluster_admin_password: "{{ hostvars['master']['master_url'] }}"
        cluster_url: "{{ hostvars['master']['master_url'] }}"
        che_keycloak_realm: "{{ eval_launcher_sso_realm }}"
      tags: ['che']
      when: eval_action == 'install' and che and launcher

    - name: Expose vars
      include_vars: "../roles/3scale/defaults/main.yml"
    - set_fact:
        threescale_wildcard_domain: "amp.{{ eval_app_host }}"
      when: eval_threescale_enable_wildcard_route
    - set_fact:
        threescale_wildcard_domain: "{{ eval_app_host }}"
      when: not eval_threescale_enable_wildcard_route
    -
      name: Install 3Scale
      include_role:
        name: 3scale
      vars:
        threescale_route_suffix: "{{ threescale_wildcard_domain }}"
        enable_wildcard_route: "{{ eval_threescale_enable_wildcard_route }}"
      tags: ['3scale']
      when: threescale
    -
      name: Expose vars
      include_vars: "../roles/webapp/defaults/main.yml"
    -
      name: "Ensure postgresql tags are imported in openshift namespace for enmasse"
      shell: oc -n openshift import-image postgresql --all
      register: result
      until: result.stdout
      retries: 50
      delay: 1
      failed_when: not result.stdout
      changed_when: False
      when: enmasse
    -
      name: Install enmasse
      include_role:
        name: enmasse
      tags: ['enmasse']
      when: enmasse
    - name: Install apicurito
      include_role:
        name: apicurito
      vars:
        apicurito_route_suffix: "{{ eval_app_host }}"
      tags: ['apicurito']
      when: apicurito

    - name: Expose vars
      include_vars: "../roles/apicurito/defaults/main.yml"
    -
      name: Install webapp
      include_role:
        name: webapp
      vars:
        openshift_master_url: "{{ hostvars['EVAL_VARS']['openshift_master_url'] }}"
      tags: ['webapp']
      when: eval_action == 'install' and webapp

    - name: Expose vars
      include_vars: "../roles/gitea/defaults/main.yml"
    -
      name: Install Gitea
      include_role:
        name: gitea
      vars:
        gitea_route_suffix: "{{ eval_app_host }}"
      tags: ['gitea']
      when: gitea

    - name: Expose vars
      include_vars: "../roles/fuse_managed/defaults/main.yml"

    -
      name: Install managed services broker
      include_role:
        name: msbroker
      vars:
        route_suffix: "{{ eval_app_host }}"
        launcher_namespace: "{{ eval_launcher_namespace }}"
        che_namespace: "{{ eval_che_namespace }}"
        apicurio_namespace: "{{ eval_apicurito_namespace }}"
      tags: ['msbroker']
