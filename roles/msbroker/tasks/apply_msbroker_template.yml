---
- name: Get Launcher dashboard url
  shell: oc get route/launcher -o jsonpath='{.spec.host}' -n {{ eval_launcher_namespace }}
  register: launcher_host_cmd
  when: launcher
- set_fact:
    launcher_dashboard_url: "https://{{ launcher_host_cmd.stdout}}"
  when: launcher

- name: Get Che dashboard url
  shell: oc get route/codeready -o jsonpath='{.spec.host}' -n {{ eval_che_namespace }}
  register: che_host_cmd
  when: che and launcher
- set_fact:
    che_dashboard_url: "https://{{ che_host_cmd.stdout}}"
  when: che and launcher

- name: Include threescale route vars
  include_vars: ../../3scale/defaults/main.yml

- name: Get 3scale dashboard url
  shell: oc get routes -l zync.3scale.net/route-to={{ threescale_route_system_provider }} -o jsonpath='{.items[*].spec.host}' -n {{ threescale_namespace }}
  register: threescale_host_cmd
  when: threescale
- set_fact:
    threescale_dashboard_url: "https://{{ threescale_host_cmd.stdout}}"
  when: threescale

- name: Get apicurito dashboard url
  shell: oc get route/apicurito -o jsonpath='{.spec.host}' -n {{ eval_apicurito_namespace }}
  register: apicurito_host_cmd
- set_fact:
    apicurito_dashboard_url: "https://{{ apicurito_host_cmd.stdout}}"
  when: apicurito

- name: Get shared Fuse dashboard url
  shell: oc get route/syndesis -o jsonpath='{.spec.host}' -n {{ eval_managed_fuse_namespace }}
  register: fuse_host_cmd
  when: fuse
- set_fact:
    fuse_dashboard_url: "https://{{ fuse_host_cmd.stdout}}"

- name: Get SSO route
  shell: oc get route/sso -o template --template \{\{.spec.host\}\} -n {{ eval_rhsso_namespace }}
  register: sso_route

- name: Get user SSO route
  shell: oc get route/sso -o template --template \{\{.spec.host\}\} -n {{ eval_user_rhsso_namespace }}
  register: user_sso_route

- name: Get mdc route
  shell: oc get route/mdc-mdc-proxy -o template --template \{\{.spec.host\}\} -n {{ eval_mdc_namespace }}
  register: mdc_route
  failed_when: false

- name: Set mdc url var
  set_fact:
    msb_mdc_url: "https://{{ mdc_route.stdout }}"
  when: mdc_route.rc == 0

- name: Set mdc url var to empty string
  set_fact:
    msb_mdc_url: ""
  when: mdc_route.rc != 0

# Used to pull images from registry.redhat.io
- name: Expose vars
  include_vars: "{{ role_path }}/../imagestream_pull_secret/defaults/main.yml"
- include_role:
    name: imagestream_pull_secret
  vars:
    namespace: "{{ msbroker_namespace }}"
    product_ns_pull_secret_name: "{{ fuse_pull_secret_name }}"
  when: fuse_online

- name: Create CRDs
  shell: "oc apply -f {{ item }}"
  with_items: "{{ msbroker_required_crds }}"

- set_fact:
    fuse_online_enabled: "true"
  when: fuse_online

- set_fact:
    fuse_online_enabled: "false"
  when: not fuse_online

- name: Create managed service broker template in {{ msbroker_namespace }}
  shell: oc process -f {{ msbroker_template }} \
    -p 'NAMESPACE={{ msbroker_namespace }}' \
    -p 'ROUTE_SUFFIX={{ route_suffix }}' \
    -p 'LAUNCHER_DASHBOARD_URL={{ launcher_dashboard_url }}' \
    -p 'CHE_DASHBOARD_URL={{ che_dashboard_url }}' \
    -p 'THREESCALE_DASHBOARD_URL={{ threescale_dashboard_url }}' \
    -p 'APICURIO_DASHBOARD_URL={{ apicurito_dashboard_url }}' \
    -p 'SHARED_FUSE_DASHBOARD_URL={{ fuse_dashboard_url }}' \
    -p 'SSO_URL=https://{{ sso_route.stdout }}/auth/admin/{{ sso_realm }}/console' \
    -p 'USER_SSO_URL=https://{{ user_sso_route.stdout }}' \
    -p 'FUSE_OPERATOR_RESOURCES_URL={{ msbroker_fuse_operator_resources_url }}' \
    -p 'MDC_DASHBOARD_URL={{ msb_mdc_url }}' \
    -p 'IMAGE_ORG={{ msbroker_image_org }}' \
    -p 'IMAGE_TAG={{ msbroker_release_tag }}' \
    -p 'MONITORING_KEY={{ monitoring_key }}' | oc apply -n "{{ msbroker_namespace }}" -f -
  register: create_msb_resources_cmd
  failed_when: create_msb_resources_cmd.stderr != '' and 'already exists' not in create_msb_resources_cmd.stderr and 'oc apply should be used on resource created by either oc create --save-config or oc apply' not in create_msb_resources_cmd.stderr


- name: Run Postinstall checks
  import_tasks: check_readiness.yml
