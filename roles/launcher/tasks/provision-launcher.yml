---
- name: "include rhsso vars"
  include_vars: ../../rhsso/defaults/main.yml

- set_fact:
    launcher_sso_openshift_idp_client_secret: "{{ 99999 | random | to_uuid }}"

- name: Generate Launcher SSO auth token for admin user on {{ launcher_sso_route }}
  uri:
    url: "https://{{ launcher_sso_route }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ launcher_sso_username }}&password={{ launcher_sso_password }}&grant_type=password"
    validate_certs: "{{ launcher_sso_validate_certs }}"
  register: launcher_sso_auth_response
  retries: 60
  delay: 5
  until: launcher_sso_auth_response.status == 200

- name: Retrieve secret for launcher openshift sso client
  shell: oc get secret {{ launcher_sso_keycloak_client_id }}-client -n {{ rhsso_namespace }} -o template --template=\{\{.data.secret\}\}
  register: openshift_client_secret_response
  failed_when: openshift_client_secret_response.stderr != ""
  until: openshift_client_secret_response.stdout
  retries: 50
  delay: 3
  changed_when: openshift_client_secret_response.stdout

- set_fact:
    client_secret: "{{ openshift_client_secret_response.stdout | b64decode }}"
  when: openshift_client_secret_response.stdout != "null"

- template:
    src: idp-keycloak.json.j2
    dest: /tmp/idp-keycloak.json

- name: Create Keycloak identity provider in Launcher SSO
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/identity-provider/instances"
    method: POST
    body: "{{ lookup('file', '/tmp/idp-keycloak.json') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]

- name: Create Launcher admin user
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/users"
    method: POST
    body: "{{ lookup('template', 'admin-user.json.j2') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]

- name: "Get Launcher admin user"
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/users?first=0&max=1&search={{ launcher_sso_admin_email }}"
    method: GET
    validate_certs: "{{ launcher_sso_validate_certs }}"
    return_content: yes
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: 200
  register: get_launcher_admin_user

- name: Update Launcher admin user credentials
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/users/{{ get_launcher_admin_user.json[0].id }}/reset-password"
    method: PUT
    body: "{{ lookup('template', 'password-reset.json.j2') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: 204

- name: Create GitHub identity provider in Launcher SSO
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/identity-provider/instances"
    method: POST
    body: "{{ lookup('template', './idp-github.json.j2') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]
  when: 
    - github_client_id != ""
    - github_client_secret != ""

- name: Get list of authentication flows
  uri:
    url: https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/authentication/flows/browser/executions
    method: GET
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: 200
  register: launcher_sso_authentication_flows

- name: Update authentication flow
  uri:
    url: https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/authentication/executions/{{ flow_id }}/config
    method: POST
    body: '{"config":{"defaultProvider":"keycloak-oidc"},"alias":"OpenShift Keycloak Users"}'
    body_format: json
    validate_certs: "{{ launcher_sso_validate_certs }}"
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]
  vars:
    flow_id: "{{ launcher_sso_authentication_flows.json[2].id }}"

- name: Check if Launcher already exists in namespace
  shell: oc get dc/launcher-backend -n {{ launcher_namespace }}
  register: launcher_exists_cmd
  failed_when: false

- name: Create Launcher from template
  shell: oc process -n {{ launcher_namespace }} -f {{ launcher_template }} --param=CREATOR_BACKEND_MEMORY_REQUEST=10Mi --param=LAUNCHER_MISSIONCONTROL_OPENSHIFT_USERNAME= --param=LAUNCHER_MISSIONCONTROL_OPENSHIFT_PASSWORD= --param=LAUNCHER_MISSIONCONTROL_OPENSHIFT_API_URL= --param=LAUNCHER_MISSIONCONTROL_OPENSHIFT_CONSOLE_URL= --param=LAUNCHER_KEYCLOAK_URL=https://{{ launcher_sso_route }}/auth --param=LAUNCHER_KEYCLOAK_REALM={{ launcher_sso_realm }} --param=LAUNCHER_KEYCLOAK_CLIENT_ID=launcher-public --param=LAUNCHER_BOOSTER_CATALOG_REPOSITORY={{ launcher_catalog_git_repo }} --param=LAUNCHER_BOOSTER_CATALOG_REF={{ launcher_catalog_git_ref }} --param=FRONTEND_IMAGE_TAG={{ launcher_frontend_image_tag }} --param=BACKEND_IMAGE_TAG={{ launcher_backend_image_tag }} | oc create -n {{ launcher_namespace }} -f -
  when: launcher_exists_cmd.rc != 0

- name: Get Launcher route
  shell: oc get route/launcher -o template --template \{\{.spec.host\}\} -n {{ launcher_namespace }}
  register: launcher_route

- name: Set Launcher GitHub repo description env var
  shell: oc set env -n {{ launcher_namespace }} dc/launcher-backend LAUNCHER_BACKEND_GIT_REPOSITORY_DESCRIPTION="{{github_repo_description}} (http://{{launcher_route.stdout}})"

- copy:
    src: patch-launcher-frontend-memory.json
    dest: /tmp/patch-launcher-frontend-memory.json

- name: Store contents of Launcher frontend patch
  shell: cat /tmp/patch-launcher-frontend-memory.json
  register: launcher_frontend_patch_contents

- name: Patch Launcher frontend (handle PDS 10Mi minimum memory restrictions)
  shell: oc patch dc/launcher-frontend -p '{{ launcher_frontend_patch_contents.stdout }}' -n {{ launcher_namespace }}
  failed_when: false

- set_fact:
    launcher_route: "{{ launcher_route.stdout }}"

- name: Create template for Launcher SSO public client
  template:
    src: client-launcher-public.json.j2
    dest: /tmp/client-launcher-public.json

- name: Create public client in Launcher SSO
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/clients"
    method: POST
    body: "{{ lookup('file', '/tmp/client-launcher-public.json') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]

- name: Create template for OpenShift v3 identity provider
  template:
    src: idp-openshift-v3.json.j2
    dest: /tmp/idp-openshift-v3.json

- name: Create OpenShift v3 identity provider in Launcher SSO
  uri:
    url: "https://{{ launcher_sso_route }}/auth/admin/realms/{{ launcher_sso_realm }}/identity-provider/instances"
    method: POST
    body: "{{ lookup('file', '/tmp/idp-openshift-v3.json') }}"
    validate_certs: "{{ launcher_sso_validate_certs }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ launcher_sso_auth_response.json.access_token }}"
    status_code: [201, 409]

- name: Check if OpenShift OAuth client already exists
  shell: oc get oauthclient {{ launcher_sso_openshift_idp_client_id }}
  register: launcher_oauthclient_check_cmd
  changed_when: false
  failed_when: false

- name: Create template for OpenShift OAuth client
  template:
    src: oauthclient.json.j2
    dest: /tmp/oauthclient.json
  when: launcher_oauthclient_check_cmd.rc != 0

- name: Create OpenShift OAuth client
  shell: oc create -f /tmp/oauthclient.json
  when: launcher_oauthclient_check_cmd.rc != 0

- template:
    src: launcher-clusters.yml.j2
    dest: /tmp/launcher-clusters.yml

- shell: cat /tmp/launcher-clusters.yml
  register: launcher_clusters_content_cmd

- name: Patch launch-clusters ConfigMap with cluster information
  shell: oc patch configmap launcher-clusters -p '{{ launcher_clusters_content_cmd.stdout }}' -n {{ launcher_namespace }}
  register: launcher_patch_clusters_cmd
  failed_when: false
