---
- name: Check if namespace exists
  shell: oc get namespace {{ launcher_namespace }}
  failed_when: false
  register: launcher_check_namespace_exists_cmd

- name: Create launcher namespace
  include_role:
    name: namespace
    tasks_from: create
  vars:
    name: "{{ launcher_namespace }}"
    display_name: "{{ launcher_display_name }}"
    monitor: true
    is_service: true
  when: launcher_check_namespace_exists_cmd.rc != 0

- name: Check if deployment config {{ launcher_sso_prefix }} exists
  shell: "oc get dc {{ launcher_sso_prefix }} -n {{ launcher_namespace }}"
  failed_when: false
  register: launcher_sso_exists_cmd

- name: "Ensure {{ launcher_sso_imagestream_name }} tag is present for redhat sso in openshift namespace"
  shell: oc tag --source=docker {{ launcher_sso_imagestream_image }} openshift/{{ launcher_sso_imagestream_name }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False
  when: launcher_sso_force_image_streams_update

- name: "Ensure {{ launcher_sso_imagestream_name }} tag has an imported image in openshift namespace"
  shell: oc -n openshift import-image {{ launcher_sso_imagestream_name }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False
  when: launcher_sso_force_image_streams_update

- name: Provision SSO for Launcher
  shell: "oc new-app {{ launcher_sso_template }} -n {{ launcher_namespace }} -p SSO_ADMIN_USERNAME={{ launcher_sso_username }} -p SSO_REALM={{ launcher_sso_realm }} -p APPLICATION_NAME={{ launcher_sso_prefix }}"
  when: launcher_sso_exists_cmd.rc != 0

- name: "Verify Launcher SSO deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ launcher_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: Retrieve launcher SSO Admin Password
  shell: "oc get dc/launcher-sso \
        -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name==\"SSO_ADMIN_PASSWORD\")].value}' \
        -n {{ launcher_namespace }}"
  register: launcher_admin_password_cmd

- set_fact:
    launcher_sso_password: "{{ launcher_admin_password_cmd.stdout }}"
    launcher_sso_admin_password: "{{ launcher_admin_password_cmd.stdout }}"
