---
- include_role:
    name: namespace
    tasks_from: create
  vars:
    name: "{{ rhsso_namespace }}"
    display_name: "Red Hat Single Sign-On"
    monitor: true
    is_service: true

- name: "Ensure {{ rhsso_imagestream_name }} tag is present for redhat sso in openshift namespace"
  shell: oc tag --source=docker {{ rhsso_imagestream_image }} openshift/{{ rhsso_imagestream_name }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False

- name: "Ensure {{ rhsso_imagestream_name }} tag has an imported image in openshift namespace"
  shell: oc -n openshift import-image {{ rhsso_imagestream_name }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False

- name: "Create required objects"
  shell: "oc create -f {{ item }} -n {{ rhsso_namespace }}"
  with_items: "{{ rhsso_operator_resource_items }}"
  register: rhsso_operator_resources_result
  failed_when: rhsso_operator_resources_result.stderr != '' and 'AlreadyExists' not in rhsso_operator_resources_result.stderr

- name: "Create keycloak resource template"
  template:
    src: "keycloak.json.j2"
    dest: "/tmp/keycloak.json"

- name: "Create keycloak resource"
  shell: oc create -f /tmp/keycloak.json -n {{ rhsso_namespace }}
  register: rhsso_keycloak
  failed_when: rhsso_keycloak.stderr != '' and 'AlreadyExists' not in rhsso_keycloak.stderr

- name: "Generate secret for rhsso client"
  set_fact:
    rhsso_client_secret: "{{ (ansible_date_time.epoch + rhsso_namespace) | hash('sha512') }}"

- name: "include threescale vars"
  include_vars: ../../3scale/defaults/main.yml

- name: "Generate secret for 3scale client"
  set_fact:
    threescale_client_secret: "{{ (ansible_date_time.epoch + threescale_namespace) | hash('sha512') }}"

- name: "include launcher vars"
  include_vars: ../../launcher/defaults/main.yml

- name: Find encrypted RH-SSO route
  shell: for route in $(oc get routes -n {{ launcher_namespace }} | awk '{print $1}' | grep 'sso' | grep -v 'NAME'); do term=$(oc get route $route -n {{ launcher_namespace }} -o template --template \{\{.spec.tls.termination\}\}); if [ "$term" == "edge" ] || [ "$term" == "reencrypt" ]; then echo $route; break; fi; done
  register: rhsso_secure_route_name
  retries: 60
  delay: 5
  failed_when: rhsso_secure_route_name.stdout == ''
  until: rhsso_secure_route_name.stdout != ''
  when: launcher

- name: Get RH-SSO secure route
  local_action: command oc get route/{{ rhsso_secure_route_name.stdout }} -o template --template \{\{.spec.host\}\} -n {{ launcher_namespace }}
  register: rhsso_secure_route

- name: "Generate secret for launcher client"
  set_fact:
    launcher_client_secret: "{{ (ansible_date_time.epoch + launcher_namespace) | hash('sha512') }}"
  when: launcher

- set_fact:
    launcher_sso_route: "{{ rhsso_secure_route.stdout }}"
  when: launcher

- set_fact:
    threescale_route_suffix: "amp.{{ apps_redirect_uri }}"
  when: enable_threescale_wildcard_route

- set_fact:
    threescale_route_suffix: "{{ apps_redirect_uri }}"
  when: not enable_threescale_wildcard_route

- name: "Create keycloak realm resource template"
  template:
    src: "keycloak-realm.json.j2"
    dest: "/tmp/keycloak-realm.json"

- name: Seed evaluation users
  include_tasks: _inject_user.yml
  vars:
    template: "/tmp/keycloak-realm.json"
    email: "{{ rhsso_seed_users_email_format|format(item|int) }}"
    username: "{{ rhsso_seed_users_name_format|format(item|int)}}"
    password: "{{ rhsso_seed_users_password }}"
  with_sequence: count={{ rhsso_seed_users_count }}

- name: "Create keycloak realm resource"
  shell: oc create -f /tmp/keycloak-realm.json -n {{ rhsso_namespace }}
  register: rhsso_kcr
  failed_when: rhsso_kcr.stderr != '' and 'AlreadyExists' not in rhsso_kcr.stderr

- name: "Verify rhsso realm is provisioned"
  shell: sleep 5; oc get keycloakrealm {{ rhsso_realm }} -o template --template \{\{.status.phase\}\}  -n {{ rhsso_namespace }}  |  grep  'reconcile'
  register: result
  until: result.stdout
  retries: 50
  delay: 10
  failed_when: not result.stdout
  changed_when: False

- name: configure logout
  import_tasks: logout.yml
