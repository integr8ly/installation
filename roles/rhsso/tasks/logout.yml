---
- name: Find encrypted RH-SSO route
  shell: for route in $(oc get routes -n {{ rhsso_namespace}} | awk '{print $1}' | grep -v 'NAME'); do term=$(oc get route $route -n {{ rhsso_namespace }} -o template --template \{\{.spec.tls.termination\}\}); if [ "$term" == "edge" ] || [ "$term" == "reencrypt" ]; then echo $route; break; fi; done
  register: rhsso_secure_route_name
  failed_when: rhsso_secure_route_name.stdout == ''

- name: Get RH-SSO secure route
  local_action: command oc get route/{{ rhsso_secure_route_name.stdout }} -o template --template \{\{.spec.host\}\} -n {{ rhsso_namespace }}
  register: rhsso_secure_route

- set_fact:
    rhsso_route: "{{ rhsso_secure_route.stdout }}"

- name: Check if logoutPublicURL parameter already set
  shell: oc get configmap {{ rhsso_openshift_webconsole_configmap }} -o yaml -n {{ rhsso_openshift_webconsole_namespace }} | grep {{ rhsso_route }}
  register: webconsole_configmap_rhsso
  failed_when: webconsole_configmap_rhsso.stderr != ''

- set_fact:
    rhsso_openshift_update_webconsole_configmap: true
  when: webconsole_configmap_rhsso.stdout == ""

- name: Export existing webconsole configmap
  shell: oc get configmap {{ rhsso_openshift_webconsole_configmap }} -o yaml -n {{ rhsso_openshift_webconsole_namespace }} > /tmp/{{ rhsso_openshift_webconsole_configmap }}.yaml
  when: rhsso_openshift_update_webconsole_configmap

- name: Set logoutPublicURL in exported webconsole configmap
  replace:
    path: "/tmp/{{ rhsso_openshift_webconsole_configmap }}.yaml"
    regexp: "logoutPublicURL: ''"
    replace: "logoutPublicURL: https://{{ rhsso_route }}/auth/realms/{{ rhsso_realm }}/protocol/openid-connect/logout?redirect_uri={{ rhsso_redirect_uri }}/console"
  when: rhsso_openshift_update_webconsole_configmap

- name: Replace webconsole configmap in {{ rhsso_openshift_webconsole_namespace }} namespace
  shell: oc replace -f /tmp/{{ rhsso_openshift_webconsole_configmap }}.yaml -n {{ rhsso_openshift_webconsole_namespace }}
  when: rhsso_openshift_update_webconsole_configmap
