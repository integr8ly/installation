---
- debug: msg="Using EnMasse git URL - {{ enmasse_git_url }}"

- include_tasks: "_download_enmasse_artifact.yml"

- name: Check EnMasse namespace for existing resources
  shell: oc get all -n {{ enmasse_namespace }}
  register: enmasse_resources_exist

- include_role:
    name: namespace
  vars:
    namespace: "{{ enmasse_namespace }}"
    display_name: "AMQ Online"


- include_tasks: "_install_enmasse_from_artifact.yml"

- name: Check if postgresql already exists
  shell: oc get deploymentconfig postgresql -n {{ enmasse_namespace }}
  register: postgresql_exists
  failed_when: postgresql_exists.stderr != '' and 'not found' not in postgresql_exists.stderr

- name: "Provision Postgres for EnMasse AuthenticationService"
  shell: oc new-app --template postgresql-persistent -p POSTGRESQL_DATABASE=amqonline -p POSTGRESQL_VERSION=9.6 -n {{ enmasse_namespace }}
  when: postgresql_exists.stderr != '' and 'not found' in postgresql_exists.stderr

- name: Generate AuthenticationService
  template:
    src: authenticationservice.yml.j2
    dest: "/tmp/authenticationservice.yml"

- name: Generate keycloak admin password
  set_fact:
    keycloak_admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

- name: Create secret with the keycloak credentials
  shell: oc create secret generic -n {{ enmasse_namespace }} keycloak-credentials --from-literal=admin.username=admin --from-literal=admin.password={{ keycloak_admin_password }}
  register: secret_exists
  failed_when: secret_exists.stderr != '' and 'AlreadyExists' not in secret_exists.stderr

- name: Label secret
  shell: oc label secret keycloak-credentials -n {{ enmasse_namespace }} app=enmasse
  when: secret_exists.rc == 0

- name: "Create EnMasse AuthenticationService"
  shell: oc create -f /tmp/authenticationservice.yml
  register: authenticationservice_exists
  failed_when: authetnicationservice_exists.stderr != '' and 'AlreadyExists' not in authetnicationservice_exists.stderr

- name: "Verify EnMasse deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ enmasse_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False

- name: Add labels to namespace
  shell: oc label --overwrite namespace {{ enmasse_namespace }} {{ monitoring_label_name }}={{ monitoring_label_value }} integreatly-middleware-service=true
  register: namespace_label
  failed_when: namespace_label.stderr != '' and 'not labeled' not in namespace_label.stderr
  changed_when: namespace_label.rc == 0
