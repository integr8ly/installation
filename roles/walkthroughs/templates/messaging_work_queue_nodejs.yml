apiVersion: v1
kind: Template
metadata:
  name: nodejs-messaging-work-queue-frontend
  annotations:
    iconClass: icon-jboss
    tags: nodejs, microservice, messaging
    template.openshift.io/provider-display-name: "Red Hat, Inc."
    description: The Node.js Work Queue Mission demonstrates scalable task processing using messaging
parameters:
  - name: MESSAGING_SERVICE_NAME
    description: Name of the messaging service
    displayName: Messaging service name
    value: '{{ msg_work_queue_node_service_name }}'
    required: true

  - name: MESSAGING_SERVICE_HOST
    description: Host of messaging service
    displayName: Messaging service
    value: '{{ msg_work_queue_node_service_host }}'
    required: true

  - name: MESSAGING_SERVICE_PORT
    description: Port used by the messaging service
    displayName: Messaging service port
    value: '{{ msg_work_queue_node_service_port }}'
    required: true

  - name: MESSAGING_SERVICE_USER
    description: User used to log into the messaging service 
    displayName: Messaging service user
    value: '{{ msg_work_queue_node_service_user }}'
    required: true

  - name: MESSAGING_SERVICE_PASSWORD
    description: Password used to log into the messaging service
    displayName: Messaging service password
    value: '{{ msg_work_queue_node_service_password }}'
    required: true

objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: {{ msg_work_queue_node_service_name }}
  data:
    MESSAGING_SERVICE_HOST: ${MESSAGING_SERVICE_HOST}
    MESSAGING_SERVICE_PORT: ${MESSAGING_SERVICE_PORT}
    MESSAGING_SERVICE_USER: ${MESSAGING_SERVICE_USER}
    MESSAGING_SERVICE_PASSWORD: ${MESSAGING_SERVICE_PASSWORD}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: nodejs-messaging-work-queue-frontend
  spec: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: runtime-nodejs-messaging-work-queue-frontend
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: bucharestgold/centos7-s2i-nodejs:10.x
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: nodejs-messaging-work-queue-frontend
    name: nodejs-messaging-work-queue-frontend
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: nodejs-messaging-work-queue-frontend
    strategy:
      rollingParams:
        timeoutSeconds: 3600
      type: Rolling
    template:
      metadata:
        labels:
          app: nodejs-messaging-work-queue-frontend
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          envFrom:
          - configMapRef:
              name: messaging-service
          image: quay.io/integreatly/nodejs-messaging-work-queue:{{ msg_work_queue_node_image_tag }}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /api/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
          name: nodejs-messaging-work-queue-frontend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/health/readiness
              port: 8080
              scheme: HTTP
          securityContext:
            privileged: false
      metadata:
        labels:
          app: nodejs-messaging-work-queue-frontend
    triggers:
    - type: ConfigChange
      imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-messaging-work-queue-frontend
        from:
          kind: ImageStreamTag
          name: nodejs-messaging-work-queue-frontend:latest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: nodejs-messaging-work-queue-frontend
    name: nodejs-messaging-work-queue-frontend
  spec:
    ports:
    - name: http
      port: 8080
    selector:
      app: nodejs-messaging-work-queue-frontend
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: nodejs-messaging-work-queue-frontend
    name: frontend
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: nodejs-messaging-work-queue-frontend
